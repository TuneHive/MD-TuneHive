// Generated by view binder compiler. Do not edit!
package com.example.tunehive.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tunehive.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView helloText;

  @NonNull
  public final TextView mostPopularLabel;

  @NonNull
  public final RecyclerView mostPopularRecyclerView;

  @NonNull
  public final ImageView profileIcon;

  @NonNull
  public final TextView recentSearchesLabel;

  @NonNull
  public final LinearLayout recentSearchesLayout;

  @NonNull
  public final RecyclerView recentSearchesRecyclerView;

  @NonNull
  public final TextView recommendationLabel;

  @NonNull
  public final RecyclerView recommendationRecyclerView;

  @NonNull
  public final AppCompatEditText searchBar;

  @NonNull
  public final TextView userName;

  @NonNull
  public final TextView viewAllText;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView, @NonNull TextView helloText,
      @NonNull TextView mostPopularLabel, @NonNull RecyclerView mostPopularRecyclerView,
      @NonNull ImageView profileIcon, @NonNull TextView recentSearchesLabel,
      @NonNull LinearLayout recentSearchesLayout, @NonNull RecyclerView recentSearchesRecyclerView,
      @NonNull TextView recommendationLabel, @NonNull RecyclerView recommendationRecyclerView,
      @NonNull AppCompatEditText searchBar, @NonNull TextView userName,
      @NonNull TextView viewAllText) {
    this.rootView = rootView;
    this.helloText = helloText;
    this.mostPopularLabel = mostPopularLabel;
    this.mostPopularRecyclerView = mostPopularRecyclerView;
    this.profileIcon = profileIcon;
    this.recentSearchesLabel = recentSearchesLabel;
    this.recentSearchesLayout = recentSearchesLayout;
    this.recentSearchesRecyclerView = recentSearchesRecyclerView;
    this.recommendationLabel = recommendationLabel;
    this.recommendationRecyclerView = recommendationRecyclerView;
    this.searchBar = searchBar;
    this.userName = userName;
    this.viewAllText = viewAllText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.helloText;
      TextView helloText = ViewBindings.findChildViewById(rootView, id);
      if (helloText == null) {
        break missingId;
      }

      id = R.id.mostPopularLabel;
      TextView mostPopularLabel = ViewBindings.findChildViewById(rootView, id);
      if (mostPopularLabel == null) {
        break missingId;
      }

      id = R.id.mostPopularRecyclerView;
      RecyclerView mostPopularRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (mostPopularRecyclerView == null) {
        break missingId;
      }

      id = R.id.profileIcon;
      ImageView profileIcon = ViewBindings.findChildViewById(rootView, id);
      if (profileIcon == null) {
        break missingId;
      }

      id = R.id.recentSearchesLabel;
      TextView recentSearchesLabel = ViewBindings.findChildViewById(rootView, id);
      if (recentSearchesLabel == null) {
        break missingId;
      }

      id = R.id.recentSearchesLayout;
      LinearLayout recentSearchesLayout = ViewBindings.findChildViewById(rootView, id);
      if (recentSearchesLayout == null) {
        break missingId;
      }

      id = R.id.recentSearchesRecyclerView;
      RecyclerView recentSearchesRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recentSearchesRecyclerView == null) {
        break missingId;
      }

      id = R.id.recommendationLabel;
      TextView recommendationLabel = ViewBindings.findChildViewById(rootView, id);
      if (recommendationLabel == null) {
        break missingId;
      }

      id = R.id.recommendationRecyclerView;
      RecyclerView recommendationRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recommendationRecyclerView == null) {
        break missingId;
      }

      id = R.id.searchBar;
      AppCompatEditText searchBar = ViewBindings.findChildViewById(rootView, id);
      if (searchBar == null) {
        break missingId;
      }

      id = R.id.userName;
      TextView userName = ViewBindings.findChildViewById(rootView, id);
      if (userName == null) {
        break missingId;
      }

      id = R.id.viewAllText;
      TextView viewAllText = ViewBindings.findChildViewById(rootView, id);
      if (viewAllText == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, helloText, mostPopularLabel,
          mostPopularRecyclerView, profileIcon, recentSearchesLabel, recentSearchesLayout,
          recentSearchesRecyclerView, recommendationLabel, recommendationRecyclerView, searchBar,
          userName, viewAllText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
